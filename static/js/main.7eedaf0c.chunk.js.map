{"version":3,"sources":["shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/UIElements/Backdrop.js","shared/components/Navigation/MainNavigation.js","shared/components/UIElements/Avatar.js","shared/components/UIElements/Card.js","user/components/UserItem.js","user/components/UsersList.js","user/pages/Users.js","App.js","serviceWorker.js","index.js"],"names":["MainHeader","children","className","NavLinks","props","to","exact","SideDrawer","show","onClick","content","CSSTransition","in","timeout","classNames","mountOnEnter","unmountOnExit","ReactDOM","createPortal","document","querySelector","Backdrop","getElementById","MainNavigation","useState","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Avatar","style","src","image","alt","width","height","Card","UserItem","id","name","placeCount","UsersList","items","length","map","places","key","User","App","path","Users","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7eedaf0c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './MainHeader.css'\nconst MainHeader = ({ children }) => {\n    return (\n        <div>\n            <header className=\"main-header\">{children}</header>\n        </div>\n    )\n}\n\nMainHeader.propTypes = {}\n\nexport default MainHeader\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { NavLink } from 'react-router-dom'\nimport './NavLinks.css'\nconst NavLinks = props => {\n    return (\n        <ul className=\"nav-links\">\n            <li>\n                <NavLink to=\"/\" exact>\n                    All Users\n                </NavLink>\n            </li>\n            <li>\n                <NavLink to=\"/u1/places\">My Places</NavLink>\n            </li>\n            <li>\n                <NavLink to=\"/places/new\">Add Place</NavLink>\n            </li>\n            <li>\n                <NavLink to=\"/auth\">Authenticate</NavLink>\n            </li>\n        </ul>\n    )\n}\n\nNavLinks.propTypes = {}\n\nexport default NavLinks\n","import React from 'react'\n\nimport ReactDOM from 'react-dom'\nimport { CSSTransition } from 'react-transition-group'\n\nimport './SideDrawer.css'\nconst SideDrawer = ({ children, show, onClick }) => {\n    const content = (\n        <CSSTransition\n            in={show}\n            timeout={2000}\n            classNames=\"slide-in-left\"\n            mountOnEnter\n            unmountOnExit\n        >\n            <aside className=\"side-drawer\" onClick={onClick}>\n                {children}\n            </aside>\n        </CSSTransition>\n    )\n\n    return ReactDOM.createPortal(\n        content,\n        document.querySelector('#drawer-hook')\n    )\n}\nexport default SideDrawer\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import React, { Fragment, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport './MainNavigation.css'\nimport MainHeader from './MainHeader'\nimport NavLinks from './NavLinks'\nimport SideDrawer from './SideDrawer'\nimport { Link } from 'react-router-dom'\nimport './MainNavigation.css'\nimport Backdrop from '../UIElements/Backdrop'\nconst MainNavigation = props => {\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false)\n\n    const openDrawerHandler = () => {\n        setDrawerIsOpen(true)\n    }\n    const closeDrawerHandler = () => {\n        setDrawerIsOpen(false)\n    }\n    return (\n        <Fragment>\n            {drawerIsOpen && <Backdrop onClick={closeDrawerHandler}></Backdrop>}\n            <SideDrawer onClick={closeDrawerHandler} show={drawerIsOpen}>\n                <nav className=\"main-navigation__drawer-nav\">\n                    <NavLinks></NavLinks>\n                </nav>\n            </SideDrawer>\n            <MainHeader>\n                <button\n                    className=\"main-navigation__menu-btn\"\n                    onClick={openDrawerHandler}\n                >\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </button>\n                <h1 className=\"main-navigation__title\">\n                    <Link to=\"/\"> Your Places</Link>\n                </h1>\n                <nav className=\"main-navigation__header-nav\">\n                    <NavLinks></NavLinks>\n                </nav>\n            </MainHeader>\n        </Fragment>\n    )\n}\n\nMainNavigation.propTypes = {}\n\nexport default MainNavigation\n","import React from 'react';\n\nimport './Avatar.css';\n\nconst Avatar = props => {\n  return (\n    <div className={`avatar ${props.className}`} style={props.style}>\n      <img\n        src={props.image}\n        alt={props.alt}\n        style={{ width: props.width, height: props.width }}\n      />\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Avatar from '../../shared/components/UIElements/Avatar'\nimport Card from '../../shared/components/UIElements/Card'\nimport { Link } from 'react-router-dom'\nimport './UserItem.css'\nconst UserItem = ({ id, image, name, placeCount }) => {\n    return (\n        <li className=\"user-item\">\n            <Card className=\"user-item__content\">\n                <Link to={`/${id}/places`}>\n                    <div className=\"user-item__image\">\n                        <Avatar image={image} alt={name}></Avatar>\n                    </div>\n                    <div className=\"user-item__info\">\n                        <h2>{name}</h2>\n                        <h3>\n                            {placeCount} {placeCount === 1 ? 'Place' : 'Places'}\n                        </h3>\n                    </div>\n                </Link>\n            </Card>\n        </li>\n    )\n}\n\nUserItem.propTypes = {}\n\nexport default UserItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport UserItem from './UserItem'\nimport Card from '../../shared/components/UIElements/Card'\n\nimport './UsersList.css'\nconst UsersList = ({ items }) => {\n    if (items.length > 0) {\n        return (\n            <ul className=\"users-list\">\n                {items.map(({ id, image, name, places }) => {\n                    return (\n                        <UserItem\n                            key={id}\n                            name={name}\n                            image={image}\n                            id={id}\n                            placeCount={places}\n                        />\n                    )\n                })}\n            </ul>\n        )\n    } else {\n        return (\n            <div className=\"center\">\n                <Card>\n                    <h2>No sers found.</h2>\n                </Card>\n            </div>\n        )\n    }\n}\n\nUsersList.propTypes = {}\n\nexport default UsersList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport UsersList from '../components/UsersList'\nconst User = () => {\n    const users = [\n        {\n            id: '123',\n            name: 'Joseph',\n            image: 'https://image.flaticon.com/icons/svg/194/194938.svg',\n            places: 3\n        }\n    ]\n    return <UsersList items={users} />\n}\n\nUser.propTypes = {}\n\nexport default User\n","import React from 'react'\nimport './App.css'\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport MainNavigation from './shared/components/Navigation/MainNavigation'\nimport Users from './user/pages/Users'\n\nfunction App() {\n    return (\n        <Router>\n            <MainNavigation></MainNavigation>\n            <main>\n                <Switch>\n                    <Route path=\"/\">\n                        <Users></Users>\n                    </Route>\n                </Switch>\n            </main>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}